{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","body","setBody","_useState5","_useState6","posts","setPosts","react_default","a","createElement","onSubmit","e","preventDefault","concat","toConsumableArray","htmlFor","id","type","name","placeholder","value","onChange","target","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"0MA+CeA,MA3Cf,WAAe,IAAAC,EAEaC,mBAAS,IAFtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENK,EAFMH,EAAA,GAECI,EAFDJ,EAAA,GAAAK,EAGWN,mBAAS,IAHpBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGNE,EAHMD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAIaV,mBAAS,IAJtBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAINE,EAJMD,EAAA,GAICE,EAJDF,EAAA,GA4Bb,OAEIG,EAAAC,EAAAC,cAAA,QAAMC,SAhBM,SAACC,GACfA,EAAEC,iBAKFN,EAAQ,GAAAO,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAKU,GAAL,CAJQ,CACdR,MAAO,GACPI,KAAM,OAGRH,EAAS,IACTI,EAAQ,MASFK,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,SAAf,cAFJ,IAE8CR,EAAAC,EAAAC,cAAA,WAC1CF,EAAAC,EAAAC,cAAA,SAAOO,GAAG,QAAQC,KAAK,OAAOC,KAAK,QAAQC,YAAY,QAAQC,MAAOvB,EAAOwB,SA3BjE,SAACV,GACnBb,EAASa,EAAEW,OAAOF,UA2BZb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOM,QAAQ,QAAf,YALJ,IAK4CR,EAAAC,EAAAC,cAAA,WACxCF,EAAAC,EAAAC,cAAA,YAAUW,MAAOnB,EAAMkB,YAAY,OAAME,SA1B9B,SAACV,GAClBT,EAAQS,EAAEW,OAAOF,SAyBX,KANJ,IAMgFb,EAAAC,EAAAC,cAAA,WAC5EF,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,UAAb,UC7BKM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAf,EAAA,GAAAgB,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgC,WAAP,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,QAOJlB","file":"static/js/main.000ebb6a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; \n\n\nfunction App() {\n\n  const [title, setTitle] = useState(\"\")\n  const [body, setBody] = useState(\"\");\n  const [posts, setPosts] = useState(\"\")\n\n  const updateTitle = (e) => {\n    setTitle(e.target.value);\n  }\n\n  const updateBody = (e) => {\n    setBody(e.target.value)\n  }\n\n  const addPost = (e) => {\n    e.preventDefault();\n    const newPost = {\n      title: '',\n      body: '',\n    };\n    setPosts([...posts, newPost]);\n    setTitle(\"\");\n    setBody(\"\");\n\n\n  }\n\n\n  return (\n    \n      <form onSubmit={addPost}>\n          <h2>Write and Save Blog</h2>\n          <label htmlFor=\"title\">Blog Title</label> <br />\n          <input id=\"title\" type=\"text\" name='title' placeholder='Title' value={title} onChange={updateTitle} />\n          <br />\n          <label htmlFor='blog' >New Blog</label> <br />\n          <textarea value={body} placeholder=\"Body\"onChange={updateBody}> </textarea> <br />\n          <button type=\"submit\">Save</button>\n      </form>\n\n  \n)};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}